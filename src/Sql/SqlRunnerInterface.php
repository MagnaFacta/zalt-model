<?php

declare(strict_types=1);

/**
 *
 * @package    Zalt
 * @subpackage Model\Sql
 * @author     Matijs de Jong <mjong@magnafacta.nl>
 */

namespace Zalt\Model\Sql;

use Zalt\Model\MetaModelInterface;

/**
 *
 * @package    Zalt
 * @subpackage Model\Sql
 * @since      Class available since version 1.0
 */
interface SqlRunnerInterface
{
    /**
     * Constant for nat an SQL columns
     */
    const NO_SQL = 'noSql';

    /**
     * @param \Zalt\Model\MetaModelInterface $metaModel
     * @param mixed                          $columns
     * @return mixed Something to be used as a sort
     */
    public function createColumns(MetaModelInterface $metaModel, mixed $columns): mixed;

    /**
     * @param \Zalt\Model\MetaModelInterface $metaModel
     * @param array                          $sort
     * @return mixed Something to be used as a sort
     */
    public function createSort(MetaModelInterface $metaModel, array $sort): mixed;
    
    /**
     * Check a filter and make sure it works for the SQL version
     * @param MetaModelInterface $metaModel
     * @param mixed $where
     * @return mixed Something to be used as a where
     */
    public function createWhere(MetaModelInterface $metaModel, mixed $where): mixed;
    
    /**
     * @param string $tableName
     * @param mixed  $where
     * @return int The number of rows deleted
     */
    public function deleteFromTable(string $tableName, mixed $where): int;

    /**
     * @param string|JoinTableStore $tables
     * @param mixed  $where
     * @return int The number of rows
     */
    public function fetchCount(string|JoinTableStore $tables, mixed $where): int;

    /**
     * @param string|JoinTableStore $tables
     * @param mixed  $columns
     * @param mixed  $where
     * @param mixed  $sort
     * @return array One row of data
     */
    public function fetchRow(string|JoinTableStore $tables, mixed $columns, mixed $where, mixed $sort): array;

    /**
     * @param string|JoinTableStore $tables
     * @param mixed  $columns
     * @param mixed  $where
     * @param mixed  $sort
     * @return array Nested rows of data
     */
    public function fetchRows(string|JoinTableStore $tables, mixed $columns, mixed $where, mixed $sort, int $offset = null, int $limit = null): array;

    /**
     * A debugging helper function
     *
     * @return string The last generated SQL statement (that could be saved
     */
    public function getLastSqlStatement(): string;

    /**
     * @param string $tableName
     * @return array name => [settings] for metamodel
     */
    public function getTableMetaData(string $tableName): array;
 
     /**
     * @param string $tableName
     * @param array  $values
     * @return ?int null or last autogenerated insert id
     */
    public function insertInTable(string $tableName, array $values): ?int;

    /**
     * @param string $tableName
     * @param array  $values
     * @param mixed  $where
     * @return int The number of rows updated
     */
    public function updateInTable(string $tableName, array $values, mixed $where): int;
}